buildscript {

    ext {
        kotlinVersion = '1.6.10'
        springBootVersion = '2.6.6'
        jacksonModuleKotlinVersion = '2.13.2'
        tokenSupportVersion = '2.0.14'
        logstashLogbackVersion = '7.0.1'
        pensjonInformasjonVersion = '9.4.10'
        epeuxVersion = '1.1.72'
        epMetricsVersion = "0.4.25"
        epSecurityStsVersion = '0.0.27'
        epLoggingVersion = '1.0.22'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }

}

//id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"

plugins {
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id 'com.github.ben-manes.versions' version '0.42.0'
    id "se.patrikerdes.use-latest-versions" version "0.2.18"
    id "org.owasp.dependencycheck" version "7.0.1"
    id "com.vanniktech.dependency.graph.generator" version "0.7.0"
    id 'com.adarshr.test-logger' version '3.2.0'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "org.jetbrains.kotlin.plugin.spring"
apply plugin: "org.jetbrains.kotlin.plugin.allopen"
apply plugin: "org.springframework.boot"

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is required"

group = 'no.nav.eessi'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions {
        //freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}

compileTestKotlin {
    kotlinOptions {
        //freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

jar {
    archivesBaseName = 'eessi-pensjon-onprem-proxy'
}

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-aop:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-cache:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-actuator:$springBootVersion")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: 'junit-vintage-engine'
    }

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonModuleKotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    //mock - test
    testImplementation("org.junit.platform:junit-platform-suite-api:1.8.2")
    testImplementation("org.jetbrains.kotlin:kotlin-test:${kotlinVersion}") {
        exclude module: 'kotlin-test-js'
        exclude module: 'kotlin-test-testng'
    }
    testImplementation("io.mockk:mockk:1.12.4")

    // Forenklere mocking av beans, benyttes som mockito mockbean
    testImplementation("com.ninja-squad:springmockk:3.1.1")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    // OIDC
    implementation("no.nav.security:token-validation-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-jaxrs:${tokenSupportVersion}")
    implementation("no.nav.security:token-client-spring:${tokenSupportVersion}")
    // Only used for starting up locally
    implementation("no.nav.security:token-validation-test-support:2.0.5")
    testImplementation("org.pac4j:spring-webmvc-pac4j:6.0.3")

    implementation("no.nav.eessi.pensjon:ep-metrics:$epMetricsVersion")
    implementation("no.nav.eessi.pensjon:ep-logging:${epLoggingVersion}")
    implementation("no.nav.eessi.pensjon:ep-security-sts:${epSecurityStsVersion}") {
        exclude module: 'ep-metrics'
    }
    implementation("no.nav.eessi.pensjon:ep-eux:${epeuxVersion}"){
        exclude module: 'ep-metrics'
    }
    //implementation(files("/Users/jens/git/ep-metrics/build/libs/ep-metrics-0.4.14.jar"))
    //Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus:1.8.4")
}


test {
    useJUnitPlatform()
}




wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

//// https://docs.gradle.org/current/userguide/jacoco_plugin.html
//jacoco {
//    toolVersion = "0.8.4"
//}
//
//jacocoTestReport {
//    reports {
//        xml.enabled true
//    }
//}

//tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

repositories {
    mavenCentral()

    ["maven-release","ep-personoppslag","tjenestespesifikasjoner","ep-metrics"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
    }
    revision = 'release'
}
