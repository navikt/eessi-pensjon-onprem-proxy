buildscript {

    ext {
        kotlinVersion = '1.7.10'
        springBootVersion = '2.7.3'
        jacksonModuleKotlinVersion = '2.13.3'
        tokenSupportVersion = '2.1.4'
        logstashLogbackVersion = '7.2'
        pensjonInformasjonVersion = '9.4.10'
        epeuxVersion = '1.3.9'
        epMetricsVersion = "0.5.11"
        epSecurityStsVersion = '0.1.17'
        epLoggingVersion = '1.0.39'
    }

    repositories {
        mavenCentral()
    }

}

plugins {
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
    id "io.spring.dependency-management" version "1.0.13.RELEASE"
    id 'com.github.ben-manes.versions' version '0.42.0'
    id "se.patrikerdes.use-latest-versions" version "0.2.18"
    id "org.owasp.dependencycheck" version "7.1.2"
    id "com.vanniktech.dependency.graph.generator" version "0.8.0"
    id 'com.adarshr.test-logger' version '3.2.0'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
}


assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is required"

group = 'no.nav.eessi'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions {
        //freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
        allWarningsAsErrors = true
    }
}

compileTestKotlin {
    kotlinOptions {
        //freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
        allWarningsAsErrors = true
    }
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

dependencies {

    // Spring-boot BOM-fil spesifiserer versjoner for Spring Boot-avhengigheter
    implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-actuator")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: 'junit-vintage-engine'
    }

    // Spring Framework BOM-fil overstyrer så vi får siste patch-versjon av Spring Framework
    implementation(platform("org.springframework:spring-framework-bom:5.3.22"))

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonModuleKotlinVersion}")

    implementation(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    testImplementation(platform("org.junit:junit-bom:5.9.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")

    testImplementation("io.mockk:mockk:1.12.5")

    // Forenklere mocking av beans, benyttes som mockito mockbean
    testImplementation("com.ninja-squad:springmockk:3.1.1")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    // OIDC
    implementation("no.nav.security:token-validation-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-jaxrs:${tokenSupportVersion}")
    implementation("no.nav.security:token-client-spring:${tokenSupportVersion}")
    // Only used for starting up locally
    implementation("no.nav.security:token-validation-test-support:2.0.5")
    testImplementation("org.pac4j:spring-webmvc-pac4j:6.0.3")

    implementation("no.nav.eessi.pensjon:ep-metrics:$epMetricsVersion")
    implementation("no.nav.eessi.pensjon:ep-logging:${epLoggingVersion}")
    implementation("no.nav.eessi.pensjon:ep-security-sts:${epSecurityStsVersion}") {
        exclude module: 'ep-metrics'
    }
    implementation("no.nav.eessi.pensjon:ep-eux:${epeuxVersion}"){
        exclude module: 'ep-metrics'
    }
}


test {
    useJUnitPlatform()
}




wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

repositories {
    mavenCentral()

    ["maven-release","ep-personoppslag","tjenestespesifikasjoner","ep-metrics"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
    }
    revision = 'release'
}
